# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Resume {
  id: ID!
  title: String
  company: String
  date: String
  startYear: Int
  endYear: Int
  role1: String
  role2: String
  role3: String
  role4: String
  role5: String
}

input ResumeWhereUniqueInput {
  id: ID
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: IDFilter
  title: StringFilter
  company: StringFilter
  date: StringFilter
  startYear: IntNullableFilter
  endYear: IntNullableFilter
  role1: StringFilter
  role2: StringFilter
  role3: StringFilter
  role4: StringFilter
  role5: StringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ResumeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  company: OrderDirection
  date: OrderDirection
  startYear: OrderDirection
  endYear: OrderDirection
  role1: OrderDirection
  role2: OrderDirection
  role3: OrderDirection
  role4: OrderDirection
  role5: OrderDirection
}

input ResumeUpdateInput {
  title: String
  company: String
  date: String
  startYear: Int
  endYear: Int
  role1: String
  role2: String
  role3: String
  role4: String
  role5: String
}

input ResumeUpdateArgs {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateInput!
}

input ResumeCreateInput {
  title: String
  company: String
  date: String
  startYear: Int
  endYear: Int
  role1: String
  role2: String
  role3: String
  role4: String
  role5: String
}

type Skill {
  id: ID!
  skillName: String
  level: Int
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  skillName: StringFilter
  level: IntNullableFilter
}

input SkillOrderByInput {
  id: OrderDirection
  skillName: OrderDirection
  level: OrderDirection
}

input SkillUpdateInput {
  skillName: String
  level: Int
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  skillName: String
  level: Int
}

type Coursework {
  id: ID!
  name: String
  course: String
  description: String
  author: String
  link: String
  photo: Photo
}

input CourseworkWhereUniqueInput {
  id: ID
}

input CourseworkWhereInput {
  AND: [CourseworkWhereInput!]
  OR: [CourseworkWhereInput!]
  NOT: [CourseworkWhereInput!]
  id: IDFilter
  name: StringFilter
  course: StringFilter
  description: StringFilter
  author: StringFilter
  link: StringFilter
  photo: PhotoWhereInput
}

input CourseworkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  course: OrderDirection
  description: OrderDirection
  author: OrderDirection
  link: OrderDirection
}

input CourseworkUpdateInput {
  name: String
  course: String
  description: String
  author: String
  link: String
  photo: PhotoRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input CourseworkUpdateArgs {
  where: CourseworkWhereUniqueInput!
  data: CourseworkUpdateInput!
}

input CourseworkCreateInput {
  name: String
  course: String
  description: String
  author: String
  link: String
  photo: PhotoRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type Education {
  id: ID!
  name: String
  title: String
  location: String
  time: String
  photo(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photoCount(where: PhotoWhereInput! = {}): Int
}

input EducationWhereUniqueInput {
  id: ID
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  location: StringFilter
  time: StringFilter
  photo: PhotoManyRelationFilter
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input EducationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  location: OrderDirection
  time: OrderDirection
}

input EducationUpdateInput {
  name: String
  title: String
  location: String
  time: String
  photo: PhotoRelateToManyForUpdateInput
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input EducationUpdateArgs {
  where: EducationWhereUniqueInput!
  data: EducationUpdateInput!
}

input EducationCreateInput {
  name: String
  title: String
  location: String
  time: String
  photo: PhotoRelateToManyForCreateInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type Portfolio {
  id: ID!
  title: String
  p1: String
  p2: String
  p3: String
  repo: String
  liveSite: String
  photo: Photo
  technology(where: TechnologyWhereInput! = {}, orderBy: [TechnologyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnologyWhereUniqueInput): [Technology!]
  technologyCount(where: TechnologyWhereInput! = {}): Int
}

input PortfolioWhereUniqueInput {
  id: ID
}

input PortfolioWhereInput {
  AND: [PortfolioWhereInput!]
  OR: [PortfolioWhereInput!]
  NOT: [PortfolioWhereInput!]
  id: IDFilter
  title: StringFilter
  p1: StringFilter
  p2: StringFilter
  p3: StringFilter
  repo: StringFilter
  liveSite: StringFilter
  photo: PhotoWhereInput
  technology: TechnologyManyRelationFilter
}

input TechnologyManyRelationFilter {
  every: TechnologyWhereInput
  some: TechnologyWhereInput
  none: TechnologyWhereInput
}

input PortfolioOrderByInput {
  id: OrderDirection
  title: OrderDirection
  p1: OrderDirection
  p2: OrderDirection
  p3: OrderDirection
  repo: OrderDirection
  liveSite: OrderDirection
}

input PortfolioUpdateInput {
  title: String
  p1: String
  p2: String
  p3: String
  repo: String
  liveSite: String
  photo: PhotoRelateToOneForUpdateInput
  technology: TechnologyRelateToManyForUpdateInput
}

input TechnologyRelateToManyForUpdateInput {
  disconnect: [TechnologyWhereUniqueInput!]
  set: [TechnologyWhereUniqueInput!]
  create: [TechnologyCreateInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input PortfolioUpdateArgs {
  where: PortfolioWhereUniqueInput!
  data: PortfolioUpdateInput!
}

input PortfolioCreateInput {
  title: String
  p1: String
  p2: String
  p3: String
  repo: String
  liveSite: String
  photo: PhotoRelateToOneForCreateInput
  technology: TechnologyRelateToManyForCreateInput
}

input TechnologyRelateToManyForCreateInput {
  create: [TechnologyCreateInput!]
  connect: [TechnologyWhereUniqueInput!]
}

type Technology {
  id: ID!
  name: String
  typeLink: String
  portfolio(where: PortfolioWhereInput! = {}, orderBy: [PortfolioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortfolioWhereUniqueInput): [Portfolio!]
  portfolioCount(where: PortfolioWhereInput! = {}): Int
}

input TechnologyWhereUniqueInput {
  id: ID
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  NOT: [TechnologyWhereInput!]
  id: IDFilter
  name: StringFilter
  typeLink: StringFilter
  portfolio: PortfolioManyRelationFilter
}

input PortfolioManyRelationFilter {
  every: PortfolioWhereInput
  some: PortfolioWhereInput
  none: PortfolioWhereInput
}

input TechnologyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  typeLink: OrderDirection
}

input TechnologyUpdateInput {
  name: String
  typeLink: String
  portfolio: PortfolioRelateToManyForUpdateInput
}

input PortfolioRelateToManyForUpdateInput {
  disconnect: [PortfolioWhereUniqueInput!]
  set: [PortfolioWhereUniqueInput!]
  create: [PortfolioCreateInput!]
  connect: [PortfolioWhereUniqueInput!]
}

input TechnologyUpdateArgs {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateInput!
}

input TechnologyCreateInput {
  name: String
  typeLink: String
  portfolio: PortfolioRelateToManyForCreateInput
}

input PortfolioRelateToManyForCreateInput {
  create: [PortfolioCreateInput!]
  connect: [PortfolioWhereUniqueInput!]
}

type Photo {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  portfolioPhoto: Portfolio
  educationPhoto(where: EducationWhereInput! = {}, orderBy: [EducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EducationWhereUniqueInput): [Education!]
  educationPhotoCount(where: EducationWhereInput! = {}): Int
  coursePhoto: Coursework
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  altText: StringFilter
  portfolioPhoto: PortfolioWhereInput
  educationPhoto: EducationManyRelationFilter
  coursePhoto: CourseworkWhereInput
}

input EducationManyRelationFilter {
  every: EducationWhereInput
  some: EducationWhereInput
  none: EducationWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input PhotoUpdateInput {
  image: Upload
  altText: String
  portfolioPhoto: PortfolioRelateToOneForUpdateInput
  educationPhoto: EducationRelateToManyForUpdateInput
  coursePhoto: CourseworkRelateToOneForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PortfolioRelateToOneForUpdateInput {
  create: PortfolioCreateInput
  connect: PortfolioWhereUniqueInput
  disconnect: Boolean
}

input EducationRelateToManyForUpdateInput {
  disconnect: [EducationWhereUniqueInput!]
  set: [EducationWhereUniqueInput!]
  create: [EducationCreateInput!]
  connect: [EducationWhereUniqueInput!]
}

input CourseworkRelateToOneForUpdateInput {
  create: CourseworkCreateInput
  connect: CourseworkWhereUniqueInput
  disconnect: Boolean
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  image: Upload
  altText: String
  portfolioPhoto: PortfolioRelateToOneForCreateInput
  educationPhoto: EducationRelateToManyForCreateInput
  coursePhoto: CourseworkRelateToOneForCreateInput
}

input PortfolioRelateToOneForCreateInput {
  create: PortfolioCreateInput
  connect: PortfolioWhereUniqueInput
}

input EducationRelateToManyForCreateInput {
  create: [EducationCreateInput!]
  connect: [EducationWhereUniqueInput!]
}

input CourseworkRelateToOneForCreateInput {
  create: CourseworkCreateInput
  connect: CourseworkWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  summary: String
  slug: String
  date: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  summary: StringFilter
  slug: StringFilter
  date: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  summary: OrderDirection
  slug: OrderDirection
  date: OrderDirection
}

input PostUpdateInput {
  title: String
  summary: String
  slug: String
  date: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  summary: String
  slug: String
  date: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createResume(data: ResumeCreateInput!): Resume
  createResumes(data: [ResumeCreateInput!]!): [Resume]
  updateResume(where: ResumeWhereUniqueInput!, data: ResumeUpdateInput!): Resume
  updateResumes(data: [ResumeUpdateArgs!]!): [Resume]
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteResumes(where: [ResumeWhereUniqueInput!]!): [Resume]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createCoursework(data: CourseworkCreateInput!): Coursework
  createCourseworks(data: [CourseworkCreateInput!]!): [Coursework]
  updateCoursework(where: CourseworkWhereUniqueInput!, data: CourseworkUpdateInput!): Coursework
  updateCourseworks(data: [CourseworkUpdateArgs!]!): [Coursework]
  deleteCoursework(where: CourseworkWhereUniqueInput!): Coursework
  deleteCourseworks(where: [CourseworkWhereUniqueInput!]!): [Coursework]
  createEducation(data: EducationCreateInput!): Education
  createEducations(data: [EducationCreateInput!]!): [Education]
  updateEducation(where: EducationWhereUniqueInput!, data: EducationUpdateInput!): Education
  updateEducations(data: [EducationUpdateArgs!]!): [Education]
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteEducations(where: [EducationWhereUniqueInput!]!): [Education]
  createPortfolio(data: PortfolioCreateInput!): Portfolio
  createPortfolios(data: [PortfolioCreateInput!]!): [Portfolio]
  updatePortfolio(where: PortfolioWhereUniqueInput!, data: PortfolioUpdateInput!): Portfolio
  updatePortfolios(data: [PortfolioUpdateArgs!]!): [Portfolio]
  deletePortfolio(where: PortfolioWhereUniqueInput!): Portfolio
  deletePortfolios(where: [PortfolioWhereUniqueInput!]!): [Portfolio]
  createTechnology(data: TechnologyCreateInput!): Technology
  createTechnologies(data: [TechnologyCreateInput!]!): [Technology]
  updateTechnology(where: TechnologyWhereUniqueInput!, data: TechnologyUpdateInput!): Technology
  updateTechnologies(data: [TechnologyUpdateArgs!]!): [Technology]
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteTechnologies(where: [TechnologyWhereUniqueInput!]!): [Technology]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  resumes(where: ResumeWhereInput! = {}, orderBy: [ResumeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResumeWhereUniqueInput): [Resume!]
  resume(where: ResumeWhereUniqueInput!): Resume
  resumesCount(where: ResumeWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  courseworks(where: CourseworkWhereInput! = {}, orderBy: [CourseworkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseworkWhereUniqueInput): [Coursework!]
  coursework(where: CourseworkWhereUniqueInput!): Coursework
  courseworksCount(where: CourseworkWhereInput! = {}): Int
  educations(where: EducationWhereInput! = {}, orderBy: [EducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EducationWhereUniqueInput): [Education!]
  education(where: EducationWhereUniqueInput!): Education
  educationsCount(where: EducationWhereInput! = {}): Int
  portfolios(where: PortfolioWhereInput! = {}, orderBy: [PortfolioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortfolioWhereUniqueInput): [Portfolio!]
  portfolio(where: PortfolioWhereUniqueInput!): Portfolio
  portfoliosCount(where: PortfolioWhereInput! = {}): Int
  technologies(where: TechnologyWhereInput! = {}, orderBy: [TechnologyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnologyWhereUniqueInput): [Technology!]
  technology(where: TechnologyWhereUniqueInput!): Technology
  technologiesCount(where: TechnologyWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
